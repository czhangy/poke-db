// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// ---------------------------------------------------------------------------------------------------------------------
// ENUMS
// ---------------------------------------------------------------------------------------------------------------------

enum BattleTags {
    required
    double
}

enum MoveCategory {
    physical
    special
    status
}

enum SegmentType {
    battle
    location
}

// ---------------------------------------------------------------------------------------------------------------------
// TYPES
// ---------------------------------------------------------------------------------------------------------------------

type BattleItems {
    item  String
    count Int
}

type Description {
    desc  String
    group Int
}

type Learnset {
    moves LearnsetMove[]
    group Int
}

type LearnsetMove {
    move  String
    level Int
}

type MoveClass {
    class MoveCategory
    group Int
}

type MoveNum {
    num   Int
    group Int
}

type MoveType {
    type  String
    group Int
}

type PokemonAbilities {
    abilities String[]
    group     Int
}

type PokemonSet {
    pokemon String
    level   Int
    ability String
    moves   String[]
    item    String
    iv      Int
    ev      Int
}

type PokemonType {
    types String[]
    group Int
}

type SegmentConditions {
    character String?
    game      String?
    starter   String?
}

type Stats {
    stats Int[]
    group Int
}

// ---------------------------------------------------------------------------------------------------------------------
// MODELS
// ---------------------------------------------------------------------------------------------------------------------

model Abilities {
    id    String        @id @default(auto()) @map("_id") @db.ObjectId
    slug  String        @unique
    name  String
    desc  Description[]
    group Int
}

model Battles {
    id        String       @id @default(auto()) @map("_id") @db.ObjectId
    slug      String       @unique
    name      String
    location  String
    team      PokemonSet[]
    items     BattleItems?
    tags      BattleTags[]
    trainer   Trainers     @relation(fields: [trainerID], references: [id])
    trainerID String       @db.ObjectId
    segment   Segments?    @relation(fields: [segmentID], references: [id])
    segmentID String?      @db.ObjectId
}

model Groups {
    id     String   @id @default(auto()) @map("_id") @db.ObjectId
    slug   String   @unique
    splits Splits[]
}

model Items {
    id         String        @id @default(auto()) @map("_id") @db.ObjectId
    slug       String        @unique
    name       String
    sprite     String
    desc       Description[]
    segments   Segments[]    @relation(fields: [segmentIDs], references: [id])
    segmentIDs String[]      @db.ObjectId
}

model Moves {
    id    String        @id @default(auto()) @map("_id") @db.ObjectId
    slug  String        @unique
    name  String
    type  MoveType[]
    class MoveClass[]
    bp    MoveNum[]
    pp    MoveNum[]
    desc  Description[]
}

model Pokemon {
    id             String             @id @default(auto()) @map("_id") @db.ObjectId
    slug           String             @unique
    name           String
    types          PokemonType[]
    sprite         String
    prevEvolutions String[]
    nextEvolutions String[]
    stats          Stats[]
    abilities      PokemonAbilities[]
    learnsets      Learnset[]
    formChangeable Boolean
}

model Segments {
    id         String            @id @default(auto()) @map("_id") @db.ObjectId
    slug       String
    name       String
    type       SegmentType
    areas      String[]
    battles    Battles[]
    items      Items[]           @relation(fields: [itemIDs], references: [id])
    itemIDs    String[]          @db.ObjectId
    conditions SegmentConditions
    split      Splits            @relation(fields: [splitID], references: [id], onDelete: Cascade)
    splitID    String            @db.ObjectId
}

model Splits {
    id       String     @id @default(auto()) @map("_id") @db.ObjectId
    name     String
    group    Groups     @relation(fields: [groupID], references: [id], onDelete: Cascade)
    groupID  String     @db.ObjectId
    segments Segments[]
}

model Trainers {
    id      String    @id @default(auto()) @map("_id") @db.ObjectId
    slug    String    @unique
    class   String
    sprite  String
    battles Battles[]
}
